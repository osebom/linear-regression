# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tOWSznyW7hJ8_HkwLgJs40AHYYbU2Nw5
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
# %matplotlib inline

!wget -O FuelConsumption.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-Coursera/labs/Data_files/FuelConsumptionCo2.csv

#Data contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada

df = pd.read_csv("FuelConsumption.csv")
df.describe()

feat_df = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
feat_df.head(9)

visual = feat_df[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]
feat_df.hist()
plt.show()
#This just just us an idea of the frequency of each occurance with the selected features

#We can now plot each of the features vs CO2 emissions to begin to get an understanding of the data
ax = plt.gca()

y= feat_df.FUELCONSUMPTION_COMB 
y1= feat_df.ENGINESIZE
x= feat_df.CO2EMISSIONS

ax.scatter(x,y, color="blue")
ax.scatter(x,y1, color="red")

plt.xlabel("FUEL CONSUMPTION & Engine Size")
plt.ylabel("CO2 Emissions")
plt.show()

#The graph above shows that there is a positive correlation between CO2 emissions and Fuel Consumption
#Same goes for Engine Size, however it is not as linear as Fuel Consumption

#Train and Test data 
#Lets split our dataset into train and test sets, 80% of the entire data for training, and the 20% for testing.

msk = np.random.rand(len(df)) < 0.8
train = feat_df[msk]
test = feat_df[~msk]

#Linear Regression fits a linear model with coefficients 𝜃 
#To minimize the 'residual sum of squares' between the independent x in the dataset, and the dependent y (Emissions) by the linear approximation

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

#Modelling

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['ENGINESIZE']])
train_y = np.asanyarray(train[['CO2EMISSIONS']])
regr.fit (train_x, train_y)
# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

#Plot outputs

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("Engine size")
plt.ylabel("Emission")

#Evaluation: Using Root Squared

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )

#Now for the Fuel Consumption


plt.scatter(train.FUELCONSUMPTION_COMB, train.CO2EMISSIONS,  color='orange')
plt.xlabel("Fuel Consumption")
plt.ylabel("Emission")
plt.show()

#Modelling

regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['FUELCONSUMPTION_COMB']])
train_y = np.asanyarray(train[['CO2EMISSIONS']])
regr.fit (train_x, train_y)
# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

#Plot outputs

plt.scatter(train.FUELCONSUMPTION_COMB, train.CO2EMISSIONS,  color='orange')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("Fuel Consumption")
plt.ylabel("Emission")

#Evaluation: Using Root Squared

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['FUELCONSUMPTION_COMB']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
test_y_hat = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_hat - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_hat , test_y) )

